{"version":3,"sources":["components/Location.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["location","props","results","spots","length","map","spot","index","className","properties","Building_name_location","Math","round","haversine","coords","geometry","coordinates","Street_Number_GPS","Street_Name_GPS","Total_number_of_bays","Phone","type","placeholder","onChange","changed","onKeyDown","enter","Map","useState","selectedSpot","setSelectedSpot","useEffect","listener","e","key","window","addEventListener","removeEventListener","containsObject","obj","list","i","viewport","onViewportChange","event","handleSpotChange","mapboxApiAccessToken","process","mapStyle","width","height","parkingData","longitude","latitude","onClick","preventDefault","image","showMarker","push","src","alt","splice","decideMarker","onClose","App","handleViewportChange","setState","handleFlyTo","destination","currentState","state","transitionDuration","transitionInterpolator","FlyToInterpolator","destinationChangedHandler","target","value","keyDownHandler","url","URL","params","q","Object","keys","forEach","searchParams","append","fetch","then","response","json","data","lng","lat","pitch","zoom","this","bind","Location","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66b3b4e6.chunk.js","sourcesContent":["import React from 'react';\nimport haversine from 'haversine-distance';\n\nconst location = ( props ) => {\n    let results = null;\n    if(props.spots.length < 1){\n        results = <p>No parking spots nearby :(</p>\n    } else {\n        results = props.spots.map((spot, index) =>\n        <div className=\"item\">\n            <h3 className=\"spotName\">{spot.properties.Building_name_location}</h3>\n            <p><em>{Math.round(haversine(props.coords, spot.geometry.coordinates))}m away</em></p>\n            <div className=\"dropdown-content\">\n                <p>{spot.properties.Street_Number_GPS} {spot.properties.Street_Name_GPS}</p>\n                <p>{spot.properties.Total_number_of_bays} parking spots</p>\n                <p>Phone: {spot.properties.Phone}</p>\n            </div>\n        </div>\n        );\n    }\n    return (\n        <div className=\"Location\">\n            <input className=\"searchBar\" type=\"text\" placeholder=\"Find parking near...\" onChange={props.changed} onKeyDown={props.enter}/>\n            <div className=\"results\">\n                {results}\n            </div>\n        </div>\n    )\n};\n\nexport default location;","import React, {useState, useEffect} from 'react';\nimport ReactMapGL, {Marker, Popup, FlyToInterpolator} from 'react-map-gl';\nimport * as parkingData from \"../OffstreetparkingData.json\";\n\nexport default function Map(props) {\n    const[selectedSpot, setSelectedSpot] = useState(null);\n    useEffect(() => {\n    const listener = e => {\n        if (e.key === \"Escape\") {\n            setSelectedSpot(null);\n        }\n    }\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n        window.removeEventListener(\"keydown\", listener);\n    }\n    }, []);\n\n    const containsObject = (obj, list) => {\n        var i;\n        for (i = 0; i < list.length; i++) {\n            if (list[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    const spots = props.spots;\n    const decideMarker = spot => {\n        let image = null;\n        if(\n            (props.viewport.longitude-0.003 <= spot.geometry.coordinates[0]) &&\n            (props.viewport.longitude+0.003 >= spot.geometry.coordinates[0]) &&\n            (props.viewport.latitude-0.003 <= spot.geometry.coordinates[1]) &&\n            (props.viewport.latitude+0.003 >= spot.geometry.coordinates[1]) &&\n            (props.showMarker)\n        ){\n            if(!containsObject(spot, spots)){\n                spots.push(spot);\n            }\n            image = <img src=\"validspot.png\" alt=\"Parking Spot\"/>;\n        } else {\n            if(containsObject(spot, spots)){\n                for(var i = spots.length - 1; i >= 0; i--) {\n                    if(spots[i] === spot) {\n                        spots.splice(i, 1);\n                    }\n                }\n            }\n            image = <img src=\"pin.png\" alt=\"Parking Spot\"/>;\n        }\n        return image;\n    }\n\n    const changeSpots = () => {\n        props.handleSpotChange(spots);\n    }\n\n    const vpChange = (event) => {\n        props.onViewportChange(event);\n        changeSpots();\n    }\n\n    return (\n        <div className=\"Map\">\n        <ReactMapGL\n            {...props.viewport}\n            onViewportChange={vpChange}\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n            width={props.width}\n            height={props.height}\n        >\n            {parkingData.features.map((spot) => (\n                <Marker key={spot.properties.Building_name_location} longitude={spot.geometry.coordinates[0]} latitude={spot.geometry.coordinates[1]}>\n                    <button className=\"marker-btn\" onClick={e=>{\n                        e.preventDefault();\n                        setSelectedSpot(spot);\n                    }}>\n                    {decideMarker(spot)}\n                    </button>\n                </Marker>\n            ))}\n\n            {selectedSpot ? (\n                <Popup longitude={selectedSpot.geometry.coordinates[0]} latitude={selectedSpot.geometry.coordinates[1]} onClose={()=> {setSelectedSpot(null)}}>\n                    <div>\n                        <h2>{selectedSpot.properties.Building_name_location}</h2>\n                        <p>{selectedSpot.properties.Street_Name_GPS}</p>\n                    </div>\n                </Popup>\n            ) : null}\n\n            {props.showMarker ? (\n                <Marker longitude={props.viewport.longitude} latitude={props.viewport.latitude}>\n                    <button className=\"marker-btn\">\n                        <img src=\"marker.png\" alt=\"You Are Here\"/>\n                    </button>\n                </Marker>\n                //TODO: Find nearest parking spots (within x km specified by user)\n            ) : null}\n        </ReactMapGL>\n        </div>\n      );\n}","import React, { Component, useState } from 'react';\nimport Location from '../src/components/Location';\nimport ReactMapGL, {FlyToInterpolator} from 'react-map-gl';\nimport Map from '../src/components/Map';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      destination: \" \",\n      showMarker: false,\n      spots: [],\n      viewport: {\n        width: \"80vw\",\n        height: \"90vh\",\n        latitude: -33.8650,\n        longitude: 151.2130,\n        pitch: 70,\n        zoom: 15.5\n      }\n    }\n  }\n\n  handleViewportChange = (viewport) => {\n    this.setState({ viewport: viewport });\n  };\n\n  handleFlyTo = destination => {\n    const currentState = {...this.state.viewport};\n    currentState.longitude = destination[0];\n    currentState.latitude = destination[1];\n    currentState.transitionDuration = 3000;\n    currentState.transitionInterpolator = new FlyToInterpolator();\n    currentState.showMarker = true;\n    this.setState({ viewport: currentState });\n    this.setState({showMarker: true});\n  };\n\n  destinationChangedHandler = (event) => {\n    const destination = event.target.value;\n    this.setState( { destination: destination } );\n  }\n\n  handleSpotChange = (spots) => {\n    this.setState( { spots: spots } );\n  }\n\n  keyDownHandler = (e) => {\n      if (e.key === 'Enter') {\n        //make an API request and update map\n        var url = new URL(\"https://api.opencagedata.com/geocode/v1/json\"),\n          params = {q:this.state.destination + \", Sydney, NSW 2000, Australia\" , key:'bca89e1d1908414981f170cf36a7fa49'}\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        fetch(url)\n          .then((response) => {\n            return response.json();\n          })\n          .then((data) => {\n            //TODO: display possibilities as a dropdown?\n            this.handleFlyTo([Math.round(data.results[0].geometry.lng * 10000)/10000,Math.round(data.results[0].geometry.lat * 10000)/10000]);\n          });\n        };\n  }\n\n  render () {\n    return (\n      <div>\n      <Map\n        width=\"100vw\"\n        height=\"100vh\"\n        viewport={this.state.viewport}\n        onViewportChange={this.handleViewportChange}\n        showMarker={this.state.showMarker}\n        spots={this.state.spots}\n        handleSpotChange={this.handleSpotChange.bind(this)}\n      />\n      <Location\n        changed={this.destinationChangedHandler}\n        enter={this.keyDownHandler}\n        spots={this.state.spots}\n        coords={[this.state.viewport.longitude, this.state.viewport.latitude]}\n      />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}